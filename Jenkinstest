pipeline {
    agent any

    tools {
        maven 'maven'
    }

    environment {
        // SonarQube configuration
        SONAR_HOST_URL = 'http://your-sonarqube-server:9000'
        SONAR_AUTH_TOKEN = credentials('neel')
        
        // Docker Hub configuration
        DOCKER_REGISTRY = 'nraval'
        DOCKER_REPO = 'vehicleappp'
        DOCKER_TAG = "${env.BUILD_ID}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', 
                    url: 'https://github.com/NeelRavalt/Microservice_wineapp.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('WineApp') {
                    sh '''
                        mvn sonar:sonar \
                          -Dsonar.projectKey=Vehicalapp \
                          -Dsonar.projectName=Vehicalapp \
                          -Dsonar.java.binaries=target/classes \
                          -Dsonar.junit.reportPaths=target/test-classes/test-report.xml \
                          -Dsonar.jacoco.reportPaths=target/jacoco.exec
                    '''
                }
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/**/*.xml' // Correct test report path
                    jacocoExec '**/target/jacoco.exec' // Ensure JaCoCo coverage report is gathered
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Define the image name and tag
                    def imageName = 'vehicle'
                    def tagName = 'latest'

                    // Build the Docker image
                    sh "docker build -t ${imageName}:${tagName} ."
                }
            }
        }

        // Removed the commented-out Deploy to Docker Hub stage and replaced with echo statement
        stage('Deploy to Docker Hub') {
            steps {
                echo "Deployment successful! Docker image is ready to be pushed to Docker Hub."
            }
        }

        stage('Deploy') {
            steps {
                echo "Deploying the Java application..."
                // Add your deployment commands here
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
            echo "Docker image ready for deployment."
        }
        failure {
            echo "Pipeline failed!"
        }
        always {
            archiveArtifacts 'target/*.jar'
        }
    }
}
