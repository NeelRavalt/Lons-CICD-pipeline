pipeline {
    agent any

    tools {
        maven 'maven' // Maven tool configured in Jenkins
    }

    environment {
        // SonarQube configuration
        SONAR_HOST_URL = 'http://your-sonarqube-server:9000'
        SONAR_AUTH_TOKEN = credentials('neel')
        
        // Docker Hub configuration
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_REGISTRY = 'nraval' // Your Docker Hub username
        DOCKER_REPO = 'vehicleappp' // Your repository name
        DOCKER_TAG = "${env.BUILD_ID}-${env.GIT_COMMIT.take(7)}" // Unique tag
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/NeelRavalt/Microservice_wineapp.git',
                credentialsId: 'github-credentials' // Add if private repo
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('WineApp') {
                    sh '''
                        mvn sonar:sonar \
                          -Dsonar.projectKey=Vehicalapp \
                          -Dsonar.projectName=Vehicalapp \
                          -Dsonar.java.binaries=target/classes \
                          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                    '''
                }
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    docker.build("${DOCKER_REGISTRY}/${DOCKER_REPO}:${DOCKER_TAG}")
                    
                    // Login to Docker Hub and push the image
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        docker.image("${DOCKER_REGISTRY}/${DOCKER_REPO}:${DOCKER_TAG}").push()
                        docker.image("${DOCKER_REGISTRY}/${DOCKER_REPO}:latest").push() // Also push as latest
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Example deployment command (adjust as needed)
                    sh """
                        docker pull ${DOCKER_REGISTRY}/${DOCKER_REPO}:${DOCKER_TAG}
                        docker stop vehicle-app || true
                        docker rm vehicle-app || true
                        docker run -d \
                            --name vehicle-app \
                            -p 8080:8080 \
                            ${DOCKER_REGISTRY}/${DOCKER_REPO}:${DOCKER_TAG}
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
            echo "Docker image pushed to: ${DOCKER_REGISTRY}/${DOCKER_REPO}:${DOCKER_TAG}"
            slackSend channel: '#builds',
                     message: "Build Success: ${env.JOB_NAME} ${env.BUILD_NUMBER}",
                     color: 'good'
        }
        failure {
            echo "Pipeline failed!"
            slackSend channel: '#builds',
                     message: "Build Failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}",
                     color: 'danger'
        }
        always {
            junit '**/target/surefire-reports/*.xml' // Archive test results
            archiveArtifacts 'target/*.jar' // Archive build artifacts
        }
    }
}
