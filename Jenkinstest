pipeline {
    agent any

    tools {
        jdk 'jdk11'  // Must match JDK name in Jenkins config
        maven 'maven' // Must match Maven name in Jenkins config
    }

    environment {
        SONAR_HOST_URL = 'http://your-sonarqube-server:9000'
        SONAR_AUTH_TOKEN = credentials('neel')
        TEST_FILE = 'src/test/java/com/rideshare/fare/service/FareCalculationServiceTest.java'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/NeelRavalt/Lons-CICD-pipeline.git'
            }
        }

        stage('Build & Test') {
            steps {
                sh 'mvn clean verify'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    jacoco(
                        execPattern: '**/target/jacoco.exec',
                        classPattern: '**/target/classes',
                        sourcePattern: '**/src/main/java',
                        exclusionPattern: '**/target/generated-sources/**'
                    )
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('WineApp') {
                    sh """
                        mvn sonar:sonar \
                          -Dsonar.projectKey=farecalculationservice \
                          -Dsonar.projectName=FareCalculationService \
                          -Dsonar.java.binaries=target/classes \
                          -Dsonar.tests=${TEST_FILE} \
                          -Dsonar.junit.reportPaths=target/surefire-reports/TEST-*.xml \
                          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                          -Dsonar.java.source=11
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/target/*.jar,**/target/surefire-reports/*,**/target/site/jacoco/*', 
                            allowEmptyArchive: true
        }
        success {
            echo 'Pipeline succeeded! Check SonarQube dashboard for details.'
        }
        failure {
            echo 'Pipeline failed! Check logs for details.'
        }
    }
}
